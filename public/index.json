[{"categories":null,"contents":" üöÄ Work Experiences Backend Engineer at eFishery (May 2022 - Now) eFishery is the first Aquaculture Technology startup in Asia that develops innovations in the aquaculture field. eFishery disrupts traditional fish farming methods and provides cutting edge solutions in the aquaculture ecosystem by offering an end-to-end platform that provides access to feed, financing, and market to fish and shrimp farmers.\nTech stack: Go, Postgres, Redis Backend Engineer at LinkAja (Oct 2020 - May 2022) LinkAja is an integrated e-wallet service created through a merger of the e-wallets of Telkomsel, Bank Mandiri, BRI, and BNI. LinkAja facilitates e-money payments, digital financial services, and fund transfers.\nGroup: Core Engineering With my squad, I contribute but not limited to:\nDevelop a service-gateway (middleware) for connecting about 120+ microservices to the core service and ensuring that flows run safely and smoothly between both systems (about ¬±90 use cases with 3 different request mechanisms and by XML \u0026amp; JSON schema on every command) using several phases \u0026amp; strategies with very minimal changes in those service clients. Result: as per I leave, 95% of client services are running well without any changes. Develop a service for authenticating user credentials and PIN life cycle. Tech stack: Go, Postgres, Redis Backend Engineer at Qoala (Jul 2020 - Oct 2020) Qoala is a disruptive insure-tech company that leverages big-data, machine learning, IoT and blockchain aiming to revolutionize the insurance landscape in Indonesia. We partner with big companies, including e-commerce and travel platforms, to enhance their customer experience through our unique and innovative insurance products.\nWith my squad, I contribute but not limited to:\nHelping the server-side team for improving the existing marketplace platform to serve the customers. Creating new features, making changes, and bug fixing by the following product requirements, and reviewing co-worker‚Äôs code as well. Create many pdf builders for insurance product detail, comparison one product and another, certificate of ownership of insurance policy. Researched \u0026amp; initialize unit testing usability for my squad. Tech stack: NodeJS, MoleculerJS, Objection.js, Jest, Go, MySQL, NATS.io Full Stack Engineer at Company Confidential (Jul 2018 - Jul 2020) I contribute but not limited to:\nImplement a Single Page Application (SPA), RESTful API and Machine Learning (Object Detection \u0026amp; Image Recognition) to develop some internal services (most likely is web application). Setup, manage, deploy, and monitor servers to ensure business continuity and production services is running well using Digital Ocean and Ubuntu server 16/18.04. Optimized and simplified the processes by analyzing business requirements and rebuilding existing solutions. Interacting with the hardware team on a daily basis for IoT integration needs. Researched primary technological developments to determine whether implementation into organizational processes was efficient and feasible. Tech stack: PHP, Javascript/NodeJS, Go, Python, ReactJS, MySQL, RabbitMQ, Jenkins, Nginx, Digital Ocean üèÜ Award Runner up, Hackathon: The Global Dialogue on Seafood Traceability (26-27 Oct 2019) Big Data for Seafood Traceability and Sustainability in Bali, Indonesia\nhttps://traceability-dialogue.org/gdst-news-_/bali-trackathon-2019/ https://devpost.com/software/fisheye-ai\nBuilding application \u0026amp; Artificial Intelligence to empower traceability and sustainability of a shrimp pond in all around Indonesia whether it is converted from a mangrove forest or not.\nIn a hope, we can:\nIncrease the sustainability awareness of the shrimp farmers in the near future. Giving more traceability for a seafood product to the end consumer. Increase a practice of sustainable aquaculture all around the world (long-term business). ","date":"Jul 02","permalink":"http://example.org/experience/","tags":null,"title":""},{"categories":null,"contents":" What I\u0026rsquo;ve Done Before A.I OpenMap Garis Besar Fitur\nFitur 90% otomatis untuk proses pencarian/penyajian lokasi tambak udang yang berpotensi di seluruh indonesia yang dilengkapi dengan AI seperti Shrimp Pond detection, Number of paddle wheel (jumlah kincir pada tambak) dan estimasi area tambak (m2) yang terdeteksi. Dirahapkan dengan data tersebut tim lapangan dan business operation dapat mengkalkulasi biomassa yang dapat dihasilkan oleh tambak tersebut untuk dijadikan target kebutuhan supply. Penyajian titik industri pelaku (demand). Fitur direction dan distance (jarak) untuk mendapatkan informasi terkait jarak antara supply (tambak) dan deman (industri) sehingga dapat meng-efisiensi pengiriman. Tech Stack: Python, PHP, Javascript, Google Cloud, Docker, RabbitMQ, Selenium, MySQL Pictafish lab Garis Besar Fitur\nPencatatan sekaligus memberikan informasi tentang kualtias air, pemberian pakan, sampling komoditas, tebar panen, sampai penyakit pada makhluk hidup yang di budidaya. Penyajian informasi berupa chart dalam menyajikan informasi terkait Fitur offline capability dan background sync yang memungkinkan apps dapat di akses dalam keadaan offline, dan dapat menginput data-data, dan akan sistem akan langsung mengirimkan ke server jika sudah ada koneksi internet Fitur integrasi menggunakan bluetooth low energy (BLE) dalam mengambil informasi berupa kualitas air seperti DO, pH, suhu dan salinitas air ke alat yang telah dibuat (IoT) dengan sensor-sensor terkait Assignment user pada suatu site (wilayah tambak) tertentu, user hanya bisa mengakses site yang sudah di assign saja Tech Stack: PHP, Javascript, PWA, Webpack, Mysql, Nginx Operations Management Garis Besar Fitur\nPencatatan sekaligus memberikan informasi semua proyek yang dijalankan oleh perusahaan dalam satu wadah seperti data campaigner, RAB, Laporan biaya real, cash in hand, Revenue, Profit, Profit sharing ratio, tanggal estimasi start-finish proyek, tanggal actual start-finish proyek, sampai barang yang di gunakan di proyek beserta invoice (struk) pembelian barang tersebut Pengajuan pencairan dana dari agent ke tim business operations dengan sistem approval dan terintegrasi dengan growpay (dompet digital milik perusahaan) Assignment agent pada suatu proyek tertentu, agent hanya bisa mengakses proyek yang sudah di assign saja Fitur reporting aktifitas proyek kedalam excel (spreadsheet) Wadah pelaporan agent terkait proyek yang dikerjakan, yang dilengkapi dengan sentiment analysis guna memudahkan tim backoffice menganalisis laporan Sistem notifikasi ke backoffice melalui email, push notification maupun whatsapp Sistem Two Factor Authentication / 2FA dalam proses login dengan menggunakan email Penandaan aktifitas proyek yang ingin ditandai Tech Stack: PHP, NodeJS(Express), Javascript, PWA, Mysql, Sendgrid, Nginx Growbuy operations management Garis Besar Fitur\nPembuatan proyek untuk mengisolasi segala macam transaksi/keuangan antar proyek Pencatatan sekaligus memberikan informasi tentang harga barang/komoditas yang di beli ataupun dijual sekaligus dengan penyimpanan digital kwitansi/struk yang lengkap dengan fitur historical jika pembayaran/piutang dicicil. Penyesuaian cash/bank melalui fitur withdrawal dan deposit. Informasi berupa stock komoditas yang tersedia saat itu. Pencatatan peralihan komoditas hidup ke mati ataupun hilang (stock adjustment) yang mempengaruhi nilai barang tersebut (sisi akuntansi) Fitur reporting transaksi kedalam excel (spreadsheet) Two levels of category, misal Udang -\u0026gt; Udang Vannamei. Peralatan Gudang -\u0026gt; Kolam Two levels of Organization (client), misal Duck King -\u0026gt; Duck King setiabudi Penyajian data berupa chart yang memperlihatkan komoditas apa saja yang terlibat di pembelian atau penjualan (Pie chart), dan bar chart yg menyajikan berapa uang yang keluar/masuk dalam rentang waktu harian Assignment user pada suatu proyek tertentu, user hanya bisa mengakses proyek yang sudah di assign saja Tech Stack: PHP, Javascript, Mysql, Nginx Storage Garis Besar Fitur\nPencatatan sekaligus memberikan informasi tentang barang masuk dan barang keluar, harga, jumlah rusak dan bagus dan barang berasal dari gudang mana ke gudang mana. Invoice generator (pdf) yang berisi barang yang dijual berikut dengan harga dan kuantiti dan sumber/tujuan gudang. Notifikasi penagihan (lengkap dengan invoice), barang masuk, barang keluar melalui email masing2 PIC gudang. Manajemen perhitungan biaya penagihan, misal gudang A menerima 10 karung pakan, namun yang terpakai hanya 7 karung, 3 karung nya di jual ke gudang B, alhasil gudang A hanya perlu membayar 7 karung, dan sisa pembayaran dialihkan ke gudang B. Tech Stack: Go lang, Javascript, Sendgrid, Mysql, Nginx Asset Management Garis Besar Fitur\nPencatatan sekaligus memberikan informasi tentang pembelian barang fixed asset seperti meja, laptop, mobil, peralatan kantor lain, kode barang, dan depresiasi barang tersebut. QRCode generator dan QRCode scanner untuk memudahkan pencarian informasi suatu barang Pencatatan peralihan PIC (pengguna barang), status barang, lokasi barang, disposal barang tanpa menghilangkan data sebelumnya (historical data) Fitur reporting fixed asset kedalam excel (spreadsheet) Fitur approval admin untuk setiap barang yang masuk dan yang ingin di disposal oleh General Affair Tech Stack: PHP, Javascript, Mysql, Nginx Earth Garis Besar Fitur\nMembuat engine web scraper sebagai sarana data untuk menyajikan prediksi sekaligus clustering gempa yang nantinya akan terjadi 1 tahun kedepan berdasarkan lokasi yang ditentukan. Dataset yang diolah didapatkan dari website bmkg (199x-2018) Tech Stack: Python, Javascript + Google Maps API, Selenium \u0026amp; BeautifulSoup, Nginx News Scraper Garis Besar Fitur\nMenyaring dan menyajikan informasi berita melalui email dengan judul berita atau keyword yang telah ditentukan sebelumnya. Diharapkan agent lapangan dapat mengetahui informasi lebih cepat dan dapat memikirkan tindakan preventif atau dampak ke tambak budidaya di wilayah tersebut Tech Stack: Python, Selenium \u0026amp; BeautifulSoup, Sendgrid, Mysql Restaurant Crawler Garis Besar Fitur\nMelakukan scraping atau ekstraksi informasi seperti alamat, nama restoran, garis besar menu, bahkan no telepon dari 2 website penyedia informasi restaurant yaitu zomato dan qraved yang diharapkan informasi tersebut dapat membantu tim marketing dalam melakukan proses kerja sama. Tech Stack: Python, BeautifulSoup Rancang Bangun Sistem Pendukung Keputusan Berbasis Web Untuk Menentukan Prioritas Customer Pada Santhi‚Äôs Cookies \u0026amp; Catering Dengan Metode Simple Additive Weighting Garis Besar Fitur\nSistem Pendukung Keputusan (SPK) atau Decision Support System menggunakan metode Simple Additive Weighting untuk menganalisis dan menentukan prioritas pelayanan customer berdasarkan kriteria-kriteria yang telah ditentukan, sehingga keputusan yang didapatkan bisa tepat sasaran. Pencatatan orderan yang masuk dan ingin di proses Tech Stack: NodeJS (Express), Javascript (VueJS), Mysql Trakindo Reporting Services Garis Besar Fitur\nReporting service untuk data-data perusahaan dari berbagai macam parameter, fitur, dan jenis data yang dibutuhkan kedalam bentuk xlsx (spreadsheet) dan berbagai macam chart Tech Stack: C# (.NET Framework), Javascript (AngularJS), SQL Server ","date":"Jul 02","permalink":"http://example.org/portfolio/","tags":null,"title":""},{"categories":null,"contents":"\nImagine you got a task to execute several commands or maybe a bunch of steps to configure something in your servers. For example; updating your Ubuntu, then add some HTML page, then install Nginx, then change its config, and then restart the Nginx service. It‚Äôll be okay if only have one or two servers. But what if you have ten servers? even maybe 15? 20? Trust me, it will hurt your back if you handle it one by one manually. That also gives a probability of human error while executing it. At this point, Ansible will become a solution for you.\nAnsible is an IT automation tool. It can configure systems, deploy software, and orchestrate more advanced IT tasks such as continuous deployments\nBefore continue, we‚Äôll need to know several terms like:\nInventory Playbooks Tasks Modules Inventory It contains a bunch of managed nodes. Like a hostfile containing several pieces of information like IP Address, port, etc for each node. There also can make groups to easier manage those nodes.\nPlaybooks Written in YAML containing a set of ordered lists of tasks will be executed repeatedly on each node.\nTasks A subset of playbooks to executing commands.\nModules A subset of Tasks to interact directly on remote hosts or through Playbooks. It‚Äôs also called ‚Äútask plugins‚Äù or ‚Äúlibrary plugins‚Äù or ‚Äúmodule library‚Äù\nPrerequisite for demo Docker Python (with pip installed) Installation 1 pip3 install ansible Ensure the Ansible was installed\n1 ansible --version I‚Äôm gonna using Docker to spin up my dummy servers. You can use others like VirtualBox, EC2 on AWS, Droplet on DigitalOcean, or something else. Ansible is agentless. Which means you can use it directly without installing an agent in each nodes. Make sure your servers are ready to be remoted via SSH.\nLet‚Äôs create a custom Docker Image, by default Ubuntu Image wasn‚Äôt support SSH by asking for the password.\nBuild the image 1 docker build -t ubuntu_ssh . We‚Äôll use this python script to create or destroy our servers\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import os fileName = \u0026#34;inventory\u0026#34; if os.path.exists(fileName): os.remove(fileName) with open(fileName, \u0026#39;a\u0026#39;) as inventory: inventory.write(\u0026#39;[local_servers]\\n\u0026#39;) for i in range(5): idx = i+1 sshPort = \u0026#34;500{}\u0026#34;.format(idx) webPort = \u0026#34;600{}\u0026#34;.format(idx) os.system(\u0026#34;docker run -it -d -p {}:22 -p {}:80 --name ubuntu-{} ubuntu_ssh\u0026#34;.format(sshPort, webPort, idx)) inventory.write(\u0026#39;localhost-{} ansible_host=localhost ansible_port=500{} ansible_user=root\\n\u0026#39;.format(idx, idx)) 1 2 3 4 import os for i in range(5): os.system(\u0026#34;docker rm ubuntu-{} --force\u0026#34;.format(i+1)) We mapping the local port to the container port. 500x as 22 (SSH) and 600x as 80 (HTTP).\nAnd then we‚Äôll create Nginx config to serve an HTML file later.\n1 2 3 4 5 6 7 8 9 server { listen 80; server_name localhost; location / { root /home; index index.html index.htm; } } Next, we‚Äôll create a playbook.yml as the Playbook. Containing an ordered task that will be executed in each node.\nCreate an HTML file using shell script. Install Nginx using apt module and update the cache as well. Copy nginx-conf file to replacing Nginx default config. Restart the Nginx service to reload the new configuration. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 - hosts: local_servers tasks: - name: Create page ansible.builtin.shell: \u0026#34;echo \u0026#39;\u0026lt;h1\u0026gt;hello world\u0026lt;/h1\u0026gt;\u0026#39; \u0026gt; /home/index.html\u0026#34; - name: Installing Nginx apt: name: nginx update_cache: yes - name: Overwrite default conf in Nginx copy: src: nginx-conf dest: /etc/nginx/sites-available/default - name: Restart nginx service ansible.builtin.service: name: nginx state: restarted OK, we finished creating all files needed, and now let‚Äôs try to execute them!\nRun this command to spin up all servers\n1 python spinup-servers.py After finished, it will generate an ‚Äúinventory‚Äù file that containing lists of nodes that run on the docker container.\nYou can write that file manually as well. We using a python script just to make this demo easier.\nThe ‚Äúlocalhost-1‚Äù is the name of host. Value from ansible_host is the host or IP address. ansible_port is SSH port. ansible_user is the user that has access to the node.\nNow, run the playbook\n1 ansible-playbook -l local_servers -i inventory playbook.yml --ask-pass -l used to specify which group server in inventory will be executed. -i used to specify the inventory file. The main args are the playbook file name. \u0026ndash;ask-pass is used to tell ansible to asks the SSH password. In case you got an error like this\nto use the ‚Äòssh‚Äô connection type with passwords, you must install the sshpass program\nYou should install sshpass depending on your OS.\nAs you can see, all nodes have finished running the commands that we specify in the playbook!\nTo verify that, we can try to do cURL to some nodes to get the result of web page as we have specified before.\nYeah! All nodes are returning the result as we expected.\nTo destroy our servers, you can execute destroy-servers.py\n1 python destroy-servers.py Final Notes This is the only introduction to Ansible. There are so many features to make your life as DevOps easier. You can check out the official documentation at https://docs.ansible.com/ansible/latest/index.html\n","date":"Jul 23","permalink":"http://example.org/post/introduction-to-ansible/","tags":null,"title":"Introduction to Ansible"},{"categories":null,"contents":"","date":"Jan 01","permalink":"http://example.org/today-i-learned/","tags":null,"title":"Today I Learned"}]